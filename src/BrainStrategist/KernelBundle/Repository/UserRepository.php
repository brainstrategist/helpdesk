<?php

namespace BrainStrategist\KernelBundle\Repository;

/**
 * UserRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class UserRepository extends \Doctrine\ORM\EntityRepository
{
    public function getUsersByProjects($params=array('limit'=>100))
    {
        extract($params);

        if (!is_null($projectID)) {

            $q = $this->createQueryBuilder('u')
                ->leftJoin('u.projects', 'up')
                ->addSelect('up')
                ->andWhere('up.id = :project')
                ->setParameter('project',$projectID)
                ->setMaxResults($limit);

            $query=$q->getQuery();
            return $q;

        }
        return false;
    }

    public function getUsersByOrganization($params=array('limit'=>100))
    {
        extract($params);

        if (!is_null($organizationID)) {

            $q = $this->createQueryBuilder('u')
                ->leftJoin('u.organizations', 'uo')
                ->addSelect('uo')
                ->andWhere('uo.id = :organization')
                ->setParameter('organization',$organizationID);

            $query = $q->getQuery();
            return $query->getArrayResult();

        }
        return false;
    }

    public function findUsers($query=null){
        if(isset($query)){
            $q = $this->createQueryBuilder('u')
                ->andWhere('u.username LIKE :user')
                ->orWhere('u.email LIKE :user')
                ->setParameter('user','%'.$query.'%');

            $query = $q->getQuery();
            $users = $query->getArrayResult();
            $return = array();
            if(sizeof($users>0)){
                foreach($users as $user){
                    $return[]= array(
                        "id" => $user['id'],
                        'label' => $user['username'].'('.$user['email'].')',
                        'value' => $user['username']);
                }
            }
            return $return;
        }
    }

}
