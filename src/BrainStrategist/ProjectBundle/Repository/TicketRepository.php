<?php

namespace BrainStrategist\ProjectBundle\Repository;

/**
 * TicketRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class TicketRepository extends \Doctrine\ORM\EntityRepository
{

    public function findAllTicketByProjectIdQuery($params)
    {
        extract($params);

        if (!is_null($projectID)) {
            $q = $this->createQueryBuilder('t')
                ->leftJoin('t.projet', 'tp')
                ->leftJoin('t.creator', 'tc')
                ->leftJoin('t.assigned_users', 'tau')
                ->leftJoin('t.category', 'tca')
                ->leftJoin('t.priority', 'tpr')
                ->leftJoin('t.status', 'tst')
                ->leftJoin('t.severity', 'ts')
                ->addSelect('tp')
                ->addSelect('tau')
                ->addSelect('tst')
                ->addSelect('tca')
                ->addSelect('tpr')
                ->addSelect('ts')
                ->addSelect('tc')
                ->andWhere('tp.id = :projet_id')
                ->setParameter('projet_id',$projectID);

            // filter by severity
            if(isset($filters['severity_filter']) && $filters['severity_filter']!=0){
                $q->andWhere('ts.id = :severity_id')->setParameter('severity_id',$filters['severity_filter']);
            }
            // filter by category
            if(isset($filters['category_filter']) && $filters['category_filter']!=0){
                $q->andWhere('tca.id = :category_id')->setParameter('category_id',$filters['category_filter']);
            }
            // filter by status
            if(isset($filters['status_filter']) && $filters['status_filter']!=0){
                $q->andWhere('tst.id = :status_id')->setParameter('status_id',$filters['status_filter']);
            }

            $query = $q->getQuery();
            return $query->setHydrationMode(\Doctrine\ORM\Query::HYDRATE_ARRAY);

        }else{
            return false;
        }

    }

    public function searchTicketBySearchField($params)
    {
        extract($params);

        if (!is_null($search_field)) {
            $q = $this->createQueryBuilder('t')
                ->leftJoin('t.projet', 'tp')
                ->leftJoin('t.creator', 'tc')
                ->leftJoin('t.assigned_users', 'tau')
                ->leftJoin('t.category', 'tca')
                ->leftJoin('t.priority', 'tpr')
                ->leftJoin('t.status', 'tst')
                ->leftJoin('t.severity', 'ts')
                ->addSelect('tp')
                ->addSelect('tau')
                ->addSelect('tst')
                ->addSelect('tca')
                ->addSelect('tpr')
                ->addSelect('ts')
                ->addSelect('tc')
                ->andWhere('t.identifier LIKE :search_field')
                ->orWhere('t.summary LIKE :search_field')
                ->andWhere('tau.id = :user_id')
                ->setParameter('user_id',$userID)
                ->setParameter('search_field','%'.$search_field.'%');

            $query = $q->getQuery();
            $query->setHydrationMode(\Doctrine\ORM\Query::HYDRATE_ARRAY);
            return $query;

        }else{
            return false;
        }

    }
    public function findAllTicketByProjectId($params=array('limit'=>100,'offset'=>0))
    {
        extract($params);

        if (!is_null($projectID)) {
        $query = $this->findAllTicketByProjectId($params);
         return $query->getArrayResult();

        }else{
            return false;
        }

    }
    public function findAllTicketByUserQuery($params)
    {
        extract($params);

        if (!is_null($userID)) {
            $q = $this->createQueryBuilder('t')
                ->leftJoin('t.projet', 'tp')
                ->leftJoin('t.creator', 'tc')
                ->leftJoin('t.assigned_users', 'tau')
                ->leftJoin('t.priority', 'tpr')
                ->leftJoin('t.category', 'tca')
                ->leftJoin('t.status', 'tst')
                ->leftJoin('t.severity', 'ts')
                ->addSelect('tp')
                ->addSelect('tst')
                ->addSelect('tau')
                ->addSelect('tca')
                ->addSelect('tpr')
                ->addSelect('ts')
                ->addSelect('tc')
                ->andWhere('tau.id = :user_id')
                ->setParameter('user_id',$userID);

            if(isset($kanban)){
                $q->orderBy('t.status','ASC')->addOrderBy('t.order','ASC');
            }
            $query = $q->getQuery();

            return $query->setHydrationMode(\Doctrine\ORM\Query::HYDRATE_ARRAY);

        }else{
            return false;
        }

    }

    public function findAllTicketByUser($params)
    {
        extract($params);

        if (!is_null($userID)) {
            $this->findAllTicketByUserQuery($params);
            return $query->getArrayResult();

        }else{
            return false;
        }

    }
    public function findOneById($id)
    {
        if (!is_null($id)) {
            $q = $this->createQueryBuilder('t')
                ->leftJoin('t.projet', 'tp')
                ->leftJoin('t.creator', 'tc')
                ->leftJoin('t.assigned_users', 'tau')
                ->leftJoin('t.category', 'tca')
                ->leftJoin('t.severity', 'ts')
                ->leftJoin('t.priority', 'tpr')
                ->leftJoin('t.pictures', 'tpic')
                ->leftJoin('t.status', 'tst')
                ->leftJoin('t.comments', 'tco')
                ->leftJoin('tco.user_comment', 'tco_usr')
                ->leftJoin('tco.pictures', 'tco_pict')
                ->leftJoin('t.logs', 'tl')
                ->addSelect('tp')
                ->addSelect('tco_usr')
                ->addSelect('tau')
                ->addSelect('tco')
                ->addSelect('tpr')
                ->addSelect('tco_pict')
                ->addSelect('tpic')
                ->addSelect('tca')
                ->addSelect('tl')
                ->addSelect('ts')
                ->addSelect('tst')
                ->addSelect('tc')
                ->andWhere('t.id = :ticket_id')
                ->setParameter('ticket_id',$id);

            $query = $q->getQuery();
            return $query->getOneOrNullResult(\Doctrine\ORM\Query::HYDRATE_ARRAY);

        }else{
            return false;
        }

    }

    /* check if current shooting is mine */
    public function isMyTicket($obj=null,$currentUser=null){

        $q= $this->createQueryBuilder('t')
            ->leftJoin('t.assigned_users', 'ta')
            ->addSelect('ta')
            ->where('t.id = :id')->setParameter('id', $obj);

        $req =  $q->getQuery();
        $res = $req->getArrayResult();

        if(isset($currentUser) && sizeof($res)>0){
            foreach($res[0]["assigned_users"] as $r){

                if($r['id']==$currentUser)
                    return true;

            }

        }
        return false;
    }
}
