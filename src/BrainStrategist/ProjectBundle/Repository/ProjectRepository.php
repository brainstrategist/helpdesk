<<<<<<< HEAD
<?php

namespace BrainStrategist\ProjectBundle\Repository;

/**
 * ProjectRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ProjectRepository extends \Doctrine\ORM\EntityRepository
{
    public function findMyProjects($params=array('limit'=>100,'offset'=>0))
    {
        extract($params);

        if (!is_null($userID)) {

            $q = $this->createQueryBuilder('p')
                ->leftJoin('p.usersProject', 'up')
                ->leftJoin('p.creator', 'pc')
                ->addSelect('up')
                ->addSelect('pc')
                ->andWhere('up.id = :user')
                ->setParameter('user',$userID)
                ->setMaxResults($limit)
                ->setFirstResult($offset);


            $query = $q->getQuery();
            return $query->getArrayResult();
        }
        return false;
    }

    public function getProjectsByOrganization($params=array('limit'=>100,'offset'=>0)){
        extract($params);

        if (!is_null($organizationID) && !is_null($userID)) {

            $q = $this->createQueryBuilder('p')
                ->leftJoin('p.usersProject', 'up')
                ->leftJoin('p.creator', 'pc')
                ->addSelect('up')
                ->addSelect('pc')
                ->andWhere('up.id = :user')
                ->andWhere('p.organization = :organization')
                ->setParameter('user',$userID)
                ->setParameter('organization',$organizationID)
                ->setMaxResults($limit)
                ->setFirstResult($offset);


            $query = $q->getQuery();
            return $query->getArrayResult();
        }
        return false;
    }

    /* check if current shooting is mine */
    public function isMyProject($obj=null,$currentUser=null){

        $q= $this->createQueryBuilder('p')
            ->leftJoin('p.usersProject', 'up')
            ->leftJoin('p.organization', 'o')
            ->addSelect('up')
            ->addSelect('o');

        if(is_numeric($obj)){
            $q->where('p.id = :id')->setParameter('id', $obj);
        }else{
            $q->where('p.slug = :slug')->setParameter('slug', $obj);
        }
        $req =  $q->getQuery();
        $res = $req->getArrayResult();

        if(isset($currentUser) && sizeof($res)>0){
            foreach($res[0]["usersProject"] as $r){

                if($r['id']==$currentUser)
                    return true;

            }

        }
        return false;
    }
}
=======
<?php

namespace BrainStrategist\ProjectBundle\Repository;

/**
 * ProjectRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ProjectRepository extends \Doctrine\ORM\EntityRepository
{
    public function findMyProjects($params=array('limit'=>100,'offset'=>0))
    {
        extract($params);

        if (!is_null($userID)) {

            $q = $this->createQueryBuilder('p')
                ->leftJoin('p.usersProject', 'up')
                ->leftJoin('p.creator', 'pc')
                ->addSelect('up')
                ->addSelect('pc')
                ->andWhere('up.id = :user')
                ->setParameter('user',$userID)
                ->setMaxResults($limit)
                ->setFirstResult($offset);


            $query = $q->getQuery();
            return $query->getArrayResult();
        }
        return false;
    }
    
    public function getProjectsByOrganization($params=array('limit'=>100,'offset'=>0)){
        extract($params);

        if (!is_null($organizationID) && !is_null($userID)) {

            $q = $this->createQueryBuilder('p')
                ->leftJoin('p.usersProject', 'up')
                ->leftJoin('p.creator', 'pc')
                ->addSelect('up')
                ->addSelect('pc')
                ->andWhere('up.id = :user')
                ->andWhere('p.organization = :organization')
                ->setParameter('user',$userID)
                ->setParameter('organization',$organizationID)
                ->setMaxResults($limit)
                ->setFirstResult($offset);


            $query = $q->getQuery();
            return $query->getArrayResult();
        }
        return false;
    }

    /* check if current shooting is mine */
    public function isMyProject($obj=null,$currentUser=null){

        $q= $this->createQueryBuilder('p')
            ->leftJoin('p.usersProject', 'up')
            ->leftJoin('p.organization', 'o')
            ->addSelect('up')
            ->addSelect('o');

        if(is_numeric($obj)){
            $q->where('p.id = :id')->setParameter('id', $obj);
        }else{
            $q->where('p.slug = :slug')->setParameter('slug', $obj);
        }
        $req =  $q->getQuery();
        $res = $req->getArrayResult();

        if(isset($currentUser) && sizeof($res)>0){
            foreach($res[0]["usersProject"] as $r){

                if($r['id']==$currentUser)
                    return true;

            }

        }
        return false;
    }
}
>>>>>>> ddcd7e837b712c51d7c50d1fb4af80b579205390
